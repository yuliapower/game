import java.util.LinkedList;
import java.util.Scanner;

public class App {
    public static void main(String[] args) {


        //создание узлов (вопросов)
        Node node12 = new Node("Поесть немного и передохнуть", "\n" +
                "Пока Лисёнок ел, злобные пчёлы вернулись и покусали его. Лисёнку нужна помощь, он не сможет продолжить поиски. Игра завершилась неудачей", null, null);
        Node node10 = new Node("Нужно попытаться выкрасть мёд немедленно", "Это была не лучшая идея. " +
                "Пчёлы покусали Лисёнка, теперь ему самому нужна помощь. Игра завершилась неудачей\n", null, null);
        Node node5 = new Node("Искать Бельчонка в одиночку", "Лисёнок слишком долго плутал по лесу в поисках друга и сам не заметил, как заблудился. " +
                "Теперь его самого нужно искать. Игра завершилась неудачей\n", null, null);
        Node node2 = new Node("Вернуться домой", "Вернувшись домой, Лисёнок нашёл там Бельчонка." +
                " Оказалось, что Бельчонок пришёл на место встречи раньше и увидел там рой злобных пчел. " +
                "Он поспешил предупредить об этом Лисёнка, но они разминулись. " +
                "Наконец-то друзья нашли друг друга! Игра завершилась успехом", null, null);


        Node node11 = new Node("Скорее отнести мёд Медвежонку", "Довольный Медвежонок рассказал Лисёнку, " +
                "что очень хорошо знает семью Белок и уверен, что Бельчонок никогда не пошёл бы в глубь леса. Он заверял Лисёнка, " +
                "что Белки не попадают в неприятности, и что Совам нельзя верить, он также уговаривал Лисёнка вернуться домой.", node5, node2);
        Node node13 = new Node("Подождать, вдруг пчёлы улетят", "Лисёнок подождал немного, и пчёлы разлетелись. " +
                "Лисёнок без проблем набрал мёда. Вдруг он понял, что очень голоден. Что же делать?", node11, node12);
        Node node9 = new Node("Нужно воспользоваться шансом и раздобыть мёд", "Лисёнок быстро нашёл мёд, но вокруг летал рой злобных пчел. " +
                "Лисёнок всегда боялся пчёл, но и не найти друга он тоже боялся.", node10, node13);
        Node node8 = new Node("Поверить Сове и отправиться вглубь леса", "\n" +
                "В глубине леса Лисёнок встретил Медвежонка. " +
                "Ленивый Медвежонок был готов рассказать все, что знает, если Лисёнок принесёт ему мёда.", node5, node9);
        Node node6 = new Node("Расспросить Волка", "Волк оказался вполне дружелюбным, но помочь не смог. " +
                "Лишь сказал, что маленькому лисенку не стоит бродить по лесу одному. " +
                "И как теперь поступить?\n", node5, node2);
        Node node7 = new Node("Расспросить Сову", "Сова долго не хотела говорить, но в итоге сказала, " +
                "что видела испуганного Бельчонка, бежавшего вглубь леса. Все лесные жители знают," +
                " что в глубине леса опасно, если Бельчонок там, ему срочно нужна помощь.", node5, node8);
        Node node4 = new Node("Попытаться разузнать о Бельчонке у лесных жителей", "Пока Лисёнок принимал решение, лесные жители разошлись кто куда. " +
                "Остались только Сова и Волк. Но у Совы бывают проблемы с памятью, а Волк может сильно разозлиться из-за расспросов. Кого выбрать?", node6, node7);
        Node node3 = new Node("Отправиться на поиски", "Все лесные жители были заняты своими " +
                "делами и не обращали внимания на Лисёнка и его проблему." +
                " Но вдруг кто нибудь видел Бельчонка... Лисёнок не знал, что ему делать. Помогите ему.", node4, node5);


        Node node1 = new Node("Лисенок", "Каждое утро Лисёнок просыпался, " +
                "завтракал и шёл увидеться с Бельчонком. Это утро не было исключением. " +
                "Лисёнок пришёл на их обычное место встречи, но Бельчонка там не было." +
                " Лисёнок ждал, ждал, но так и не смог дождаться своего друга. " +
                "\" Бельчонок не пропустил еще ни одной встречи, вдруг он попал в беду." +
                "\" - подумал Лисёнок. Как поступить Лисенку?\n", node2, node3);

           LinkedList<Node> nodes = new LinkedList<>();
            nodes.add(node1);
            nodes.add(node2);
            nodes.add(node3);
            nodes.add(node4);
            nodes.add(node5);
            nodes.add(node6);
            nodes.add(node7);
            nodes.add(node8);
            nodes.add(node9);
            nodes.add(node10);
            nodes.add(node11);
            nodes.add(node12);
            nodes.add(node13);


        Menu menu = new Menu();
        Command saveGame = new SaveGameCommand(menu);
        Command startGame = new StartGameCommand(menu);
        Command downloadGame = new DownloadGameCommand(menu);
        Command exit = new ExitCommand(menu);
        Command menuReturn = new MenuReturnCommand(menu, node1);


        User user = new User(startGame, downloadGame, saveGame, exit, menuReturn);


        node1.setUser(user);
        node2.setUser(user);
        node3.setUser(user);
        node4.setUser(user);
        node5.setUser(user);
        node6.setUser(user);
        node7.setUser(user);
        node8.setUser(user);
        node9.setUser(user);
        node10.setUser(user);
        node11.setUser(user);
        node12.setUser(user);
        node13.setUser(user);


        // Scanner scanner = new Scanner(System.in);
        //  String command;
        user.menuReturn();

        //  command = scanner.nextLine();
   /*     switch (command) {
            case "1":
                //while ()
                user.start();
                node1.game(node1,user);
               return;
            case "2":
                user.download();
                return;
            case "3":
                user.exit();
                break;
            default:
                System.out.println("Неизвестная команда");
        }
        */

    }
}
